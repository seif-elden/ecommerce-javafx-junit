package DAO;

import DAO.UserDAO;
import db.DatabaseConnection;
import models.User;
import models.UserRole;
import org.junit.jupiter.api.*;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class UserDAOTest {
    private UserDAO userDAO;
    private Connection testConnection;
    private String uniqueUsername;
    private User testUser;

    @BeforeEach
    void setUp() throws SQLException {
        // Get a live database connection
        testConnection = DatabaseConnection.getConnection();
        testConnection.setAutoCommit(false); // Start transaction

        // Initialize DAO with test connection
        userDAO = new UserDAO();
        userDAO.setConnection(testConnection);

        // Generate unique test data
        uniqueUsername = "testuser_" + UUID.randomUUID().toString().substring(0, 8);
        testUser = createTestUser();
    }

    @AfterEach
    void tearDown() throws SQLException {
        // Rollback transaction to undo changes
        testConnection.rollback();
        testConnection.close();
    }

    @Test
    void testCreateAndRetrieveUser() {
        // Test creation
        boolean created = userDAO.createUser(testUser);
        assertTrue(created, "User should be created successfully");

        // Test retrieval
        User foundUser = userDAO.findByUsername(uniqueUsername);
        assertNotNull(foundUser, "Created user should be retrievable");
        assertUserEquals(testUser, foundUser);
    }

    @Test
    void testUpdateUser() {
        userDAO.createUser(testUser);

        // Modify user details
        testUser.setEmail("new.email@test.com");
        testUser.setAddress("Updated Address");
        testUser.setProfilePic("new_avatar.jpg");

        boolean updated = userDAO.updateUser(testUser);
        assertTrue(updated, "User update should succeed");

        User updatedUser = userDAO.findByUsername(uniqueUsername);
        assertEquals("new.email@test.com", updatedUser.getEmail());
        assertEquals("Updated Address", updatedUser.getAddress());
        assertEquals("new_avatar.jpg", updatedUser.getProfilePic());
    }

    @Test
    void testDeleteUser() {
        userDAO.createUser(testUser);
        int userId = testUser.getId();

        boolean deleted = userDAO.deleteUser(userId);
        assertTrue(deleted, "User deletion should succeed");

        User deletedUser = userDAO.findByUsername(uniqueUsername);
        assertNull(deletedUser, "Deleted user should not be found");
    }

    @Test
    void testPasswordHashingAndValidation() {
        userDAO.createUser(testUser);

        // Test valid credentials
        assertTrue(userDAO.validateCredentials(uniqueUsername, "testpass123"),
                "Valid credentials should pass");

        // Test invalid credentials
        assertFalse(userDAO.validateCredentials(uniqueUsername, "wrongpass"),
                "Invalid credentials should fail");
    }

    @Test
    void testDuplicateUsernamePrevention() {
        userDAO.createUser(testUser);

        User duplicateUser = new User(
                0,
                uniqueUsername,
                "anotherpass",
                "dupe@test.com",
                "Duplicate Address",
                "dupe.jpg",
                UserRole.USER
        );

        boolean duplicateCreated = userDAO.createUser(duplicateUser);
        assertFalse(duplicateCreated, "Duplicate username should be prevented");
    }

    @Test
    void testUserRolePersistence() {
        User adminUser = new User(
                0,
                uniqueUsername,
                "adminpass",
                "admin@test.com",
                "Admin Address",
                "admin.jpg",
                UserRole.ADMIN
        );

        userDAO.createUser(adminUser);
        User foundUser = userDAO.findByUsername(uniqueUsername);

        assertEquals(UserRole.ADMIN, foundUser.getRole(),
                "User role should persist correctly");
    }

    private User createTestUser() {
        return new User(
                0, // ID will be generated by DB
                uniqueUsername,
                "testpass123",
                "testuser@example.com",
                "123 Test Street",
                "default.jpg",
                UserRole.USER
        );
    }

    private void assertUserEquals(User expected, User actual) {
        assertEquals(expected.getUsername(), actual.getUsername(), "Username mismatch");
        assertEquals(expected.getEmail(), actual.getEmail(), "Email mismatch");
        assertEquals(expected.getAddress(), actual.getAddress(), "Address mismatch");
        assertEquals(expected.getProfilePic(), actual.getProfilePic(), "Profile pic mismatch");
        assertEquals(expected.getRole(), actual.getRole(), "Role mismatch");
        assertTrue(actual.getId() > 0, "User ID should be generated");
    }
}